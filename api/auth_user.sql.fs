// Code generated by sqlc. DO NOT EDIT.
// source: auth_user.sql


module AuthUser 

open Npgsql
open Npgsql.FSharp
open System






let createAuthUser = """-- name: CreateAuthUser :one
INSERT INTO auth_user (email, "password", first_name, last_name, username, is_staff, is_superuser)
VALUES (@email, @password, @first_name, @last_name, @username, @is_staff, @is_superuser)
RETURNING id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined
"""


type CreateAuthUserParams = {
  Email: string;
  Password: string;
  FirstName: string;
  LastName: string;
  Username: string;
  IsStaff: bool;
  IsSuperuser: bool;
}

let CreateAuthUser (db: NpgsqlConnection)  (arg: CreateAuthUserParams)  =
  
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  

  db
  |> Sql.existingConnection
  |> Sql.query createAuthUser
  |> Sql.parameters  [ "@email", Sql.string arg.Email; "@password", Sql.string arg.Password; "@first_name", Sql.string arg.FirstName; "@last_name", Sql.string arg.LastName; "@username", Sql.string arg.Username; "@is_staff", Sql.bool arg.IsStaff; "@is_superuser", Sql.bool arg.IsSuperuser ]
  |> Sql.executeRow reader















let deleteAuthUser = """-- name: DeleteAuthUser :exec
DELETE FROM auth_user WHERE email = @email
"""






let DeleteAuthUser (db: NpgsqlConnection)  (email: string)  = 
  db 
  |> Sql.existingConnection
  |> Sql.query deleteAuthUser
  |> Sql.parameters  [ "@email", Sql.string email ]
  |> Sql.executeNonQuery











let getAllAuthUsers = """-- name: GetAllAuthUsers :many
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user ORDER BY id
"""




let GetAllAuthUsers (db: NpgsqlConnection)  =
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  db 
  |> Sql.existingConnection
  |> Sql.query getAllAuthUsers
  |> Sql.execute reader










let getAuthUserByEmail = """-- name: GetAuthUserByEmail :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE email = @email
"""



let GetAuthUserByEmail (db: NpgsqlConnection)  (email: string)  =
  
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  

  db
  |> Sql.existingConnection
  |> Sql.query getAuthUserByEmail
  |> Sql.parameters  [ "@email", Sql.string email ]
  |> Sql.executeRow reader












let getAuthUserByID = """-- name: GetAuthUserByID :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE id = @id
"""



let GetAuthUserByID (db: NpgsqlConnection)  (id: int32)  =
  
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  

  db
  |> Sql.existingConnection
  |> Sql.query getAuthUserByID
  |> Sql.parameters  [ "@id", Sql.int id ]
  |> Sql.executeRow reader
















let getTotalActiveUserCount = """-- name: GetTotalActiveUserCount :one
SELECT COUNT(*) FROM auth_user WHERE is_active = true
"""



let GetTotalActiveUserCount (db: NpgsqlConnection)   =
  
  let reader = fun (read:RowReader) -> read.int64 "count"

  db
  |> Sql.existingConnection
  |> Sql.query getTotalActiveUserCount
  |> Sql.executeRow reader












let getUserByEmail = """-- name: GetUserByEmail :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user WHERE email = @email
"""



let GetUserByEmail (db: NpgsqlConnection)  (email: string)  =
  
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  

  db
  |> Sql.existingConnection
  |> Sql.query getUserByEmail
  |> Sql.parameters  [ "@email", Sql.string email ]
  |> Sql.executeRow reader














let listAuthUsers = """-- name: ListAuthUsers :many
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined FROM auth_user ORDER BY id LIMIT @limit OFFSET @offset
"""


type ListAuthUsersParams = {
  Limit: int32;
  Offset: int32;
}


let ListAuthUsers (db: NpgsqlConnection)  (arg: ListAuthUsersParams) =
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    Password = read.string "password"
    LastLogin = read.dateTime "last_login"
    IsSuperuser = read.bool "is_superuser"
    Username = read.string "username"
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"
    IsStaff = read.bool "is_staff"
    IsActive = read.bool "is_active"
    DateJoined = read.dateTime "date_joined"}
  db 
  |> Sql.existingConnection
  |> Sql.query listAuthUsers
  |> Sql.parameters  [ "@limit", Sql.int arg.Limit; "@offset", Sql.int arg.Offset ]
  |> Sql.execute reader












let updateAuthUser = """-- name: UpdateAuthUser :one
UPDATE auth_user SET first_name = @first_name, last_name= @last_name, last_login = now() 
WHERE id = @id
RETURNING first_name, last_name, email
"""


type UpdateAuthUserParams = {
  Id: int32;
  FirstName: string;
  LastName: string;
}
type UpdateAuthUserRow = {
  FirstName: string;
  LastName: string;
  Email: string;
}

let UpdateAuthUser (db: NpgsqlConnection)  (arg: UpdateAuthUserParams)  =
  
  let reader = fun (read:RowReader) -> {
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"}
  

  db
  |> Sql.existingConnection
  |> Sql.query updateAuthUser
  |> Sql.parameters  [ "@id", Sql.int arg.Id; "@first_name", Sql.string arg.FirstName; "@last_name", Sql.string arg.LastName ]
  |> Sql.executeRow reader












let updateAuthUserByEmail = """-- name: UpdateAuthUserByEmail :one
UPDATE auth_user SET first_name = @first_name, last_name= @last_name, last_login = now() 
WHERE email = @email
RETURNING first_name, last_name, email
"""


type UpdateAuthUserByEmailParams = {
  Email: string;
  FirstName: string;
  LastName: string;
}
type UpdateAuthUserByEmailRow = {
  FirstName: string;
  LastName: string;
  Email: string;
}

let UpdateAuthUserByEmail (db: NpgsqlConnection)  (arg: UpdateAuthUserByEmailParams)  =
  
  let reader = fun (read:RowReader) -> {
    FirstName = read.string "first_name"
    LastName = read.string "last_name"
    Email = read.string "email"}
  

  db
  |> Sql.existingConnection
  |> Sql.query updateAuthUserByEmail
  |> Sql.parameters  [ "@email", Sql.string arg.Email; "@first_name", Sql.string arg.FirstName; "@last_name", Sql.string arg.LastName ]
  |> Sql.executeRow reader













let updateUserPassword = """-- name: UpdateUserPassword :exec
UPDATE auth_user SET "password" = @password WHERE email = @email
"""


type UpdateUserPasswordParams = {
  Email: string;
  Password: string;
}




let UpdateUserPassword (db: NpgsqlConnection)  (arg: UpdateUserPasswordParams)  = 
  db 
  |> Sql.existingConnection
  |> Sql.query updateUserPassword
  |> Sql.parameters  [ "@email", Sql.string arg.Email; "@password", Sql.string arg.Password ]
  |> Sql.executeNonQuery









