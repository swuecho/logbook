// Code generated by sqlc. DO NOT EDIT.
// source: summary.sql


module Summary 

open Npgsql
open Npgsql.FSharp
open System




















let getSummaryByUserIDAndID = """-- name: GetSummaryByUserIDAndID :one
SELECT id, note_id, user_id, created_at, last_updated, content FROM summary WHERE user_id = @user_id and note_id=@note_id
"""


type GetSummaryByUserIDAndIDParams = {
  UserId: int32;
  NoteId: string;
}

let GetSummaryByUserIDAndID (db: NpgsqlConnection)  (arg: GetSummaryByUserIDAndIDParams)  =
  
  let reader = fun (read:RowReader) -> {
    Id = read.int "id"
    NoteId = read.string "note_id"
    UserId = read.int "user_id"
    CreatedAt = read.dateTime "created_at"
    LastUpdated = read.dateTime "last_updated"
    Content = read.string "content"}
  

  db
  |> Sql.existingConnection
  |> Sql.query getSummaryByUserIDAndID
  |> Sql.parameters  [ "@user_id", Sql.int arg.UserId; "@note_id", Sql.string arg.NoteId ]
  |> Sql.executeRow reader












let getSummaryByUserId = """-- name: GetSummaryByUserId :many
select note_id, content as note from summary where user_id = @user_id order by note_id desc
"""


type GetSummaryByUserIdRow = {
  NoteId: string;
  Note: string;
}


let GetSummaryByUserId (db: NpgsqlConnection)  (userId: int32) =
  let reader = fun (read:RowReader) -> {
    NoteId = read.string "note_id"
    Note = read.string "note"}
  db 
  |> Sql.existingConnection
  |> Sql.query getSummaryByUserId
  |> Sql.parameters  [ "@user_id", Sql.int userId ]
  |> Sql.execute reader












let insertSummary = """-- name: InsertSummary :exec
insert INTO summary (note_id, user_id, content, last_updated) 
VALUES (@note_id, @user_id, @content, now()) 
ON CONFLICT (note_id, user_id) DO UPDATE SET content = EXCLUDED.content, last_updated =  EXCLUDED.last_updated
"""


type InsertSummaryParams = {
  NoteId: string;
  UserId: int32;
  Content: string;
}




let InsertSummary (db: NpgsqlConnection)  (arg: InsertSummaryParams)  = 
  db 
  |> Sql.existingConnection
  |> Sql.query insertSummary
  |> Sql.parameters  [ "@note_id", Sql.string arg.NoteId; "@user_id", Sql.int arg.UserId; "@content", Sql.jsonb arg.Content ]
  |> Sql.executeNonQuery








let lastUpdated = """-- name: LastUpdated :one
select last_updated from summary where note_id = @note_id and user_id = @user_id
"""


type LastUpdatedParams = {
  NoteId: string;
  UserId: int32;
}

let LastUpdated (db: NpgsqlConnection)  (arg: LastUpdatedParams)  =
  
  let reader = fun (read:RowReader) -> read.dateTime "last_updated"

  db
  |> Sql.existingConnection
  |> Sql.query lastUpdated
  |> Sql.parameters  [ "@note_id", Sql.string arg.NoteId; "@user_id", Sql.int arg.UserId ]
  |> Sql.executeRow reader





















