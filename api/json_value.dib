#!markdown

## Parse Json in Fsharp

demonstrate how to use load package

#!fsharp

#r "nuget: FSharp.Data"

#!fsharp

open FSharp.Data

#!fsharp

#r "/Users/hwu/dev/notepad/bin/Debug/netframework5.0/Notepad.dll"

#!fsharp

open Models

#!fsharp

let noteAsync = async {
                let! queryResult = NoteQ.getNoteById "20210109"

                let queryResultJson =
                    match queryResult with
                    | Ok survey -> survey 
                    | Error err -> raise err

                return queryResultJson
}

#!fsharp

let note = noteAsync |> Async.RunSynchronously

#!fsharp

let json_value = JsonValue.Parse note.Note  //|> Seq.ofArray |> Seq.iter (fun x -> printfn "%A" x)

#!fsharp

open System
open System.Text

#!fsharp

/// Join a sequence of strings using a delimiter.
/// Equivalent to String.Join() but without arrays.
let join  (delim : string) (items : seq<string>) =
    // Collect the result in the string builder buffer
    // The end-sequence will be "item1,delim,...itemN,delim"
    let buff = 
        Seq.fold 
            (fun (buff :StringBuilder) (s:string) -> buff.Append(s).Append(delim)) 
            (new StringBuilder()) 
            items
    buff.Remove(buff.Length-delim.Length, delim.Length).ToString()

#!fsharp

let rec getContent (jv: JsonValue)= 
    let extract_property ((x,y): string * JsonValue) = 
        if x = "content" then
           getContent y
        elif x = "text"  then
            y |> string
        else
            " "
    match jv with 
        // JsonValue.Array(elements) -> Array.map getContent elements
        | JsonValue.Array(arr) -> arr |> Array.map getContent |> join " "
        | JsonValue.Record(record) -> record |> Array.map extract_property  |> join " "
        | JsonValue.String(str) -> str
        | JsonValue.Number(n) ->  n |> string
        | JsonValue.Float(f) ->  f |> string
        | JsonValue.Boolean(b) ->  b |> string
        | JsonValue.Null ->  ""

#!fsharp

let rec getContent2 (jv: JsonValue)= 
    let extract_property (x,y) = 
       match (x,y) with 
        | ("content", y)  -> getContent2 y
        | ("text", y) -> string y 
        | (_, y) ->  " "
    match jv with 
        // JsonValue.Array(elements) -> Array.map getContent elements
        | JsonValue.Array(arr) -> arr |> Array.map getContent2 |> join " "
        | JsonValue.Record(record) -> record |> Array.map extract_property  |> join " "
        | JsonValue.String(str) -> str
        | JsonValue.Number(n) ->  n |> string
        | JsonValue.Float(f) ->  f |> string
        | JsonValue.Boolean(b) ->  b |> string
        | JsonValue.Null ->  ""

#!fsharp

getContent2 json_value

#!fsharp

let res = getContent json_value

#!fsharp

res

#!fsharp

printfn "%A" json_value
